apply plugin: 'maven-publish'
apply plugin: 'fabric-loom'
apply plugin: 'com.replaymod.preprocess'
//apply plugin: 'me.fallenbreath.yamlang'

preprocess {
    tabIndentation = true
}

repositories {
    maven {
        name = "Quilt"
        url = "https://maven.quiltmc.org/repository/release/"
    }
}

// https://github.com/FabricMC/fabric-loader/issues/783
configurations {
    modRuntimeOnly.exclude group: 'net.fabricmc', module: 'fabric-loader'
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "org.quiltmc:quilt-mappings:${project.minecraft_version}+build.${project.quilt_mappings}:intermediary-v2"
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
}

base {
    archivesName = project.archives_base_name
}

String MIXIN_CONFIG_PATH = 'screenshot_options.mixins.json'
String LANG_DIR = 'assets/screenshot_options/lang'
JavaVersion JAVA_COMPATIBILITY = JavaVersion.VERSION_17

loom {
    runConfigs.all {
        // to make sure it generates all "Minecraft Client (:subproject_name)" applications
        ideConfigGenerated = true
        runDir '../../run'
        vmArgs '-Dmixin.debug.export=true'
    }
}

remapJar {
    remapperIsolation = true
}

version = "$project.mod_version-mc$project.minecraft_version"
group = project.maven_group

// See https://youtrack.jetbrains.com/issue/IDEA-296490
// if IDEA complains about "Cannot resolve resource filtering of MatchingCopyAction" and you want to know why
processResources {
    inputs.property "id", project.mod_id
    inputs.property "name", project.mod_name
    inputs.property "version", version
    inputs.property "description", project.mod_description
    inputs.property "author", project.mod_author

    filesMatching("fabric.mod.json") {
        def valueMap = [
                "id": project.mod_id,
                "name": project.mod_name,
                "version": version,
                "description": project.mod_description,
                "author": project.mod_author,
        ]
        expand valueMap
    }

    filesMatching(MIXIN_CONFIG_PATH) {
        expand "compatibility_level": "JAVA_${JAVA_COMPATIBILITY.ordinal() + 1}"
    }
}

//// https://github.com/Fallen-Breath/yamlang
//yamlang {
//    targetSourceSets = [sourceSets.main]
//    inputDir = LANG_DIR
//}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
}

java {
    withSourcesJar()
    sourceCompatibility = JAVA_COMPATIBILITY
    targetCompatibility = JAVA_COMPATIBILITY
}

jar {
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId archivesBaseName
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {}
}